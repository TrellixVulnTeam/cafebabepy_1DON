buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

mainClassName = 'org.cafebabepy.Main'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.cafebabepy'
version = '3.6.2.0'
project.ext {
    artifactId = 'cafebabepy'
    defaultEncoding = 'UTF-8'
}

ext.versions = [
        gradle: '4.7'
]

ext.antlr = [
        grammarpackage: 'org.cafebabepy.parser.antlr',
        antlrSource   : 'src/main/antlr',
        destinationDir: "${buildDir}/generated-sources/java"
]

ext.python = [
        sourceDir    : 'src/main/python',
        testSourceDir: 'src/test/python'
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

sourceSets.main.java.srcDirs = [antlr.destinationDir] + sourceSets.main.java.srcDirs
sourceSets.main.resources.srcDirs = [python.sourceDir] + sourceSets.main.resources.srcDirs
sourceSets.test.resources.srcDirs = [python.testSourceDir] + sourceSets.test.resources.srcDirs

dependencies {
    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.7'
    antlr4 group: 'org.antlr', name: 'antlr4', version: '4.7'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.2'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.2'
}

tasks.withType(JavaCompile) {
    options.encoding = defaultEncoding
    options.compilerArgs << '-parameters'
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    testLogging.showStandardStreams = true
}

task wrapper(type: Wrapper) {
    gradleVersion = versions.gradle
}

task antlrOutputDir {
    doLast {
        mkdir(antlr.destinationDir)
    }
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = []
    grammars += file(antlr.antlrSource + '/PythonLexer.g4')
    grammars += file(antlr.antlrSource + '/PythonParser.g4')
    grammars += file(antlr.antlrSource + '/PythonInteractiveValidateParser.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", "-visitor", "-no-listener", "-package", antlr.grammarpackage, grammars].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir, sourceSets.main.java
}

run {
    standardInput = System.in
}

clean {
    delete antlr.destinationDir
}